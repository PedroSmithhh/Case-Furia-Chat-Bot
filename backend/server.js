const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
// Importa especificamente o SessionsClient do pacote do Dialogflow
const { SessionsClient } = require('@google-cloud/dialogflow');

// --- SE칂츾O DE AUTENTICA칂츾O REMOVIDA ---
// N칚o precisamos mais verificar e parsear 'process.env.GOOGLE_CREDENTIALS'.
// A biblioteca do Google far치 a autentica칞칚o automaticamente.

// Configura o cliente do Dialogflow (sem passar credenciais no c칩digo)
// A biblioteca ir치 procurar a vari치vel de ambiente GOOGLE_APPLICATION_CREDENTIALS sozinha.
const sessionClient = new SessionsClient();

// Define o ID do projeto explicitamente. 칄 mais seguro e claro.
const projectId = 'furiachatbot-458501'; 
const sessionId = 'unique-session-id'; // Pode ser um ID 칰nico por usu치rio no futuro
const sessionPath = sessionClient.projectAgentSessionPath(projectId, sessionId);

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// Porta din칙mica pro Render
const PORT = process.env.PORT || 3000;

// Configura a pasta frontend como est치tica pra servir index.html, style.css, imagens, etc.
app.use(express.static(path.join(__dirname, '..', 'frontend')));

// Serve o index.html na rota principal
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'frontend', 'index.html'));
});

// Fun칞칚o pra simular updates de jogos (fict칤cios, pra dar vibe de live)
function sendGameUpdate() {
   const updates = [
  'Clutch do KSCERATO! 3k na bombsite B! 游댠',
  'Placar atual: FURIA 8 x 6 Inimigo. T칪 sentindo o comeback! 游낹',
  'yuurih t치 on fire! Headshot atr치s de headshot! 游눩',
  'molodoy com um no-scope insano! AWP na m칚o 칠 perigo! 游끥',
  'YEKINDAR abrindo o jogo com 2k na entrada! Agressivo demais! 游댠',
  'Intervalo! FURIA 7 x 8 Inimigo. Bora virar isso, na칞칚o!'
 ];
 const randomUpdate = updates[Math.floor(Math.random() * updates.length)];
 io.emit('gameUpdate', randomUpdate);
}